{"remainingRequest":"/Users/jonatanpersson/Documents/jp/repos/flyer-globe/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jonatanpersson/Documents/jp/repos/flyer-globe/src/components/Globe.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jonatanpersson/Documents/jp/repos/flyer-globe/src/components/Globe.vue","mtime":1595704485804},{"path":"/Users/jonatanpersson/Documents/jp/repos/flyer-globe/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonatanpersson/Documents/jp/repos/flyer-globe/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jonatanpersson/Documents/jp/repos/flyer-globe/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonatanpersson/Documents/jp/repos/flyer-globe/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Globe.vue"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Globe.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div id=\"globe\"></div>\n</template>\n\n<script>\nimport * as THREE from 'three'\nimport OrbitControls from 'three-orbitcontrols'\nimport SeaImage from '../assets/sea.jpg'\nimport Stars from '../assets/stars.png'\nimport Countries from '../data/globe-countries'\nimport Tessalator3D from '../utils/tessalator3d'\n\nexport default {\n    name: 'Globe',\n    props: [],\n    data: () => ({\n        renderer: null,\n        scene: null,\n        camera: null,\n        controls: null,\n        radius: 0.995,\n        segments: 32,\n        intersectedObject: null,\n        hoverScale: 1.01,\n        continents: [\"EU\", \"AN\", \"AS\", \"OC\", \"SA\", \"AF\", \"NA\"],\n        resultCountries: [],\n        globeCountries: []\n    }),\n\n    methods: {\n        initGlobe() {\n            this.setupRenderer()\n            this.scene = new THREE.Scene()\n            this.setupCamera()\n            this.setupLights()\n\n            this.baseGlobe = new THREE.Object3D()\n            this.baseGlobe.scale.set(20, 20, 20)\n            this.scene.add(this.baseGlobe)\n\n            const starfield = new THREE.Mesh(\n                new THREE.SphereGeometry(90, 64, 64), \n                new THREE.MeshBasicMaterial({\n                    map: THREE.ImageUtils.loadTexture(Stars), \n                    side: THREE.BackSide\n                })\n            )\n            this.scene.add(starfield)\n\n            this.setupTexture()\n\n            this.setupControls()\n\n            document.addEventListener('mousemove', this.onDocumentMouseMove, false)\n            document.addEventListener('keyup', this.onMouseKeyUp, false)\n        },\n\n        onDocumentMouseMove(event) {\n            event.preventDefault()\n\n            const mouseX = (event.clientX / window.innerWidth) * 2 - 1\n            const mouseY = -(event.clientY / window.innerHeight) * 2 + 1\n            const vector = new THREE.Vector3(mouseX, mouseY, -1)\n            vector.unproject(this.camera)\n\n            const raycaster = new THREE.Raycaster(this.camera.position, vector.sub(this.camera.position).normalize())\n            const intersects = raycaster.intersectObject(this.baseGlobe, true)\n            if (intersects.length > 0 && intersects[0].object.name === \"land\") {\n                this.controls.autoRotate = false\n                this.intersectedObject = intersects[0].object\n            } else {\n                this.intersectedObject = null\n            }\n        },\n\n        onMouseKeyUp(event) {\n            if (event.keyCode === 82) { // key: R\n                this.controls.autoRotate = !this.controls.autoRotate\n            }\n        },\n        \n        setupRenderer() {\n            this.renderer = new THREE.WebGLRenderer()\n            this.renderer.setClearColor(0x000000, 0.0)\n            this.renderer.setPixelRatio(window.devicePixelRatio)\n            this.renderer.setSize(window.innerWidth, window.innerHeight)\n            document.body.appendChild(this.renderer.domElement)\n        },\n        \n        setupCamera() {\n            this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.01, 4500);\n            this.camera.position.x = -22\n            this.camera.position.y = 10\n            this.camera.position.z = -64\n        },\n\n        setupLights() {\n            this.scene.add(new THREE.AmbientLight(0x555555))\n            \n            var directionalLight1 = new THREE.DirectionalLight(0xaaaaaa, 0.5);\n            directionalLight1.position.set(-1, 1, 1).normalize();\n            this.scene.add(directionalLight1);\n\n            var directionalLight2 = new THREE.DirectionalLight(0xaaaaaa, 0.5);\n            directionalLight2.position.set(-1, 1, -1).normalize();\n            this.scene.add(directionalLight2);\n\n            var directionalLight3 = new THREE.DirectionalLight(0xaaaaaa, 0.5);\n            directionalLight3.position.set(1, 1, -1).normalize();\n            this.scene.add(directionalLight3);\n\n            var directionalLight4 = new THREE.DirectionalLight(0xaaaaaa, 0.5);\n            directionalLight4.position.set(1, 1, 1).normalize();\n            this.scene.add(directionalLight4);\n        },\n\n        setupTexture() {\n            const seaTexture = THREE.ImageUtils.loadTexture(SeaImage, THREE.UVMapping, () => {\n                seaTexture.wrapS = THREE.RepeatWrapping\n                seaTexture.wrapT = THREE.RepeatWrapping\n                seaTexture.repeat.set(16, 8)\n                this.baseGlobe.add(new THREE.Mesh(\n                    new THREE.SphereGeometry(this.radius, this.segments, this.segments),\n                    new THREE.MeshLambertMaterial({\n                        transparent: true,\n                        depthTest: true,\n                        depthWrite: false,\n                        opacity: 0.95,\n                        map: seaTexture,\n                        color: 0x6699ff\n                    })\n                ))\n                this.createCountries()\n            })\n        },\n\n        setupControls() {\n            this.controls = new OrbitControls( this.camera, this.renderer.domElement )\n            this.controls.rotateSpeed = 0.45;\n            this.controls.zoomSpeed = 0.20;\n            this.controls.minDistance = 20.0;\n            this.controls.maxDistance = 100.0;\n            this.controls.dynamicDampingFactor = 0.1\n            this.controls.autoRotateSpeed = 1.0;\n            setTimeout(() => {\n                this.controls.autoRotate = true\n            }, 3000)\n        },\n\n        getColorBasedOnContient(countryCode) {\n            let color = new THREE.Color(0xff0000)\n            const country = this.globeCountries.find(country => country.data.code === countryCode)\n            let contientIndex = country ? this.continents.indexOf(country.data.cont) : -1\n            if(!country) {\n                color = new THREE.Color(0x000000)\n                console.log('could not found matching country', countryCode)\n            } else if (contientIndex !== -1) {\n                // Temp fix for not using green colors on contients\n                // TODO - make color matrix for continents\n                contientIndex = contientIndex === 2 ? 4 : contientIndex\n                color.setHSL(\n                    contientIndex * (1 / 7),\n                    Math.random() * 0.25 + 0.65,\n                    Math.random() / 2 + 0.25\n                )\n            }\n            return color\n        },\n\n        createCountries() {\n            this.globeCountries.forEach(country => {\n                const geometry = new Tessalator3D(country, 0)\n\n                const color = this.getColorBasedOnContient(country.data.code)\n\n                const mesh = country.mesh = new THREE.Mesh(geometry, new THREE.MeshLambertMaterial({\n                    color: color\n                }))\n                mesh.name = \"land\";\n                mesh.userData.country = country.data.name\n                mesh.userData.code = country.data.code\n                this.baseGlobe.add(mesh)\n            })\n        },\n\n        animate() {\n            const animate = () => {\n                requestAnimationFrame(animate)\n                this.controls.update()\n                this.renderer.render(this.scene, this.camera)\n            }\n            animate()\n        }\n    },\n\n    watch: {\n        intersectedObject: function(newVal, oldVal)  {\n            if(newVal !== oldVal) {\n                if(oldVal != null) {\n                    oldVal.scale.set(1.0, 1.0, 1.0)\n                }\n                if(newVal != null) {\n                    newVal.scale.set(this.hoverScale, 1.01, 1.01)\n                }\n                this.$emit('onCountryChange', newVal != null ? newVal.userData.country : '')\n            }\n        }\n    },\n\n    mounted() {\n        this.globeCountries = Object.keys(Countries).reduce(function(result, country) {\n            var item = Countries[country]\n            item.data.name = country;\n            result.push(item)\n            return result;\n        }, [])\n        this.initGlobe()\n        this.animate()\n    }\n}\n</script>\n\n<style scoped>\n</style>\n"]}]}
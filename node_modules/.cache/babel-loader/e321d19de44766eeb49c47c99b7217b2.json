{"remainingRequest":"/Users/jonatanpersson/Documents/jp/repos/flight-globe/node_modules/babel-loader/lib/index.js!/Users/jonatanpersson/Documents/jp/repos/flight-globe/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jonatanpersson/Documents/jp/repos/flight-globe/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jonatanpersson/Documents/jp/repos/flight-globe/src/components/Globe.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jonatanpersson/Documents/jp/repos/flight-globe/src/components/Globe.vue","mtime":1596226912302},{"path":"/Users/jonatanpersson/Documents/jp/repos/flight-globe/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonatanpersson/Documents/jp/repos/flight-globe/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jonatanpersson/Documents/jp/repos/flight-globe/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonatanpersson/Documents/jp/repos/flight-globe/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Globe.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAKA,OAAA,KAAA,KAAA,MAAA,OAAA;AACA,OAAA,aAAA,MAAA,qBAAA;AACA,OAAA,QAAA,MAAA,mBAAA;AACA,OAAA,KAAA,MAAA,qBAAA;AACA,OAAA,SAAA,MAAA,yBAAA;AACA,OAAA,YAAA,MAAA,uBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,OADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,MAAA,EAAA,KADA;AAEA,IAAA,MAAA,EAAA,KAFA;AAGA,IAAA,MAAA,EAAA,MAHA;AAIA,IAAA,UAAA,EAAA,OAJA;AAKA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,WAAA,EAAA,MAFA;AAGA,MAAA,IAAA,EAAA;AAHA;AALA,GAFA;AAaA,EAAA,IAAA,EAAA;AAAA,WAAA;AACA,MAAA,QAAA,EAAA,IADA;AAEA,MAAA,KAAA,EAAA,IAFA;AAGA,MAAA,MAAA,EAAA,IAHA;AAIA,MAAA,QAAA,EAAA,IAJA;AAKA,MAAA,MAAA,EAAA,KALA;AAMA,MAAA,QAAA,EAAA,EANA;AAOA,MAAA,iBAAA,EAAA,IAPA;AAQA,MAAA,UAAA,EAAA,IARA;AASA,MAAA,UAAA,EAAA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,CATA;AAUA,MAAA,eAAA,EAAA,EAVA;AAWA,MAAA,cAAA,EAAA;AAXA,KAAA;AAAA,GAbA;AA0BA,EAAA,OAAA,EAAA;AACA,IAAA,SADA,uBACA;AACA,WAAA,aAAA;AACA,WAAA,KAAA,GAAA,IAAA,KAAA,CAAA,KAAA,EAAA;AACA,WAAA,WAAA;AACA,WAAA,WAAA;AAEA,WAAA,SAAA,GAAA,IAAA,KAAA,CAAA,QAAA,EAAA;AACA,WAAA,SAAA,CAAA,KAAA,CAAA,GAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA;AACA,WAAA,KAAA,CAAA,GAAA,CAAA,KAAA,SAAA;AAEA,UAAA,SAAA,GAAA,IAAA,KAAA,CAAA,IAAA,CACA,IAAA,KAAA,CAAA,cAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CADA,EAEA,IAAA,KAAA,CAAA,iBAAA,CAAA;AACA,QAAA,GAAA,EAAA,KAAA,CAAA,UAAA,CAAA,WAAA,CAAA,KAAA,CADA;AAEA,QAAA,IAAA,EAAA,KAAA,CAAA;AAFA,OAAA,CAFA,CAAA;AAOA,WAAA,KAAA,CAAA,GAAA,CAAA,SAAA;AAEA,WAAA,YAAA;AAEA,WAAA,aAAA;AAEA,MAAA,QAAA,CAAA,gBAAA,CAAA,WAAA,EAAA,KAAA,mBAAA,EAAA,KAAA;AACA,MAAA,QAAA,CAAA,gBAAA,CAAA,OAAA,EAAA,KAAA,YAAA,EAAA,KAAA;AACA,KA1BA;AA4BA,IAAA,mBA5BA,+BA4BA,KA5BA,EA4BA;AACA,MAAA,KAAA,CAAA,cAAA;AAEA,UAAA,MAAA,GAAA,KAAA,CAAA,OAAA,GAAA,MAAA,CAAA,UAAA,GAAA,CAAA,GAAA,CAAA;AACA,UAAA,MAAA,GAAA,EAAA,KAAA,CAAA,OAAA,GAAA,MAAA,CAAA,WAAA,IAAA,CAAA,GAAA,CAAA;AACA,UAAA,MAAA,GAAA,IAAA,KAAA,CAAA,OAAA,CAAA,MAAA,EAAA,MAAA,EAAA,CAAA,CAAA,CAAA;AACA,MAAA,MAAA,CAAA,SAAA,CAAA,KAAA,MAAA;AAEA,UAAA,SAAA,GAAA,IAAA,KAAA,CAAA,SAAA,CAAA,KAAA,MAAA,CAAA,QAAA,EAAA,MAAA,CAAA,GAAA,CAAA,KAAA,MAAA,CAAA,QAAA,EAAA,SAAA,EAAA,CAAA;AACA,UAAA,UAAA,GAAA,SAAA,CAAA,eAAA,CAAA,KAAA,SAAA,EAAA,IAAA,CAAA;;AACA,UAAA,UAAA,CAAA,MAAA,GAAA,CAAA,IAAA,UAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,KAAA,MAAA,EAAA;AACA,aAAA,QAAA,CAAA,UAAA,GAAA,KAAA;AACA,aAAA,iBAAA,GAAA,UAAA,CAAA,CAAA,CAAA,CAAA,MAAA;AACA,OAHA,MAGA;AACA,aAAA,iBAAA,GAAA,IAAA;AACA;AACA,KA5CA;AA8CA,IAAA,YA9CA,wBA8CA,KA9CA,EA8CA;AACA,UAAA,KAAA,CAAA,OAAA,KAAA,EAAA,EAAA;AAAA;AACA,aAAA,QAAA,CAAA,UAAA,GAAA,CAAA,KAAA,QAAA,CAAA,UAAA;AACA;AACA,KAlDA;AAoDA,IAAA,aApDA,2BAoDA;AACA,WAAA,QAAA,GAAA,IAAA,KAAA,CAAA,aAAA,EAAA;AACA,WAAA,QAAA,CAAA,aAAA,CAAA,QAAA,EAAA,GAAA;AACA,WAAA,QAAA,CAAA,aAAA,CAAA,MAAA,CAAA,gBAAA;AACA,WAAA,QAAA,CAAA,OAAA,CAAA,MAAA,CAAA,UAAA,EAAA,MAAA,CAAA,WAAA;AACA,MAAA,QAAA,CAAA,IAAA,CAAA,WAAA,CAAA,KAAA,QAAA,CAAA,UAAA;AACA,KA1DA;AA4DA,IAAA,WA5DA,yBA4DA;AACA,WAAA,MAAA,GAAA,IAAA,KAAA,CAAA,iBAAA,CAAA,EAAA,EAAA,MAAA,CAAA,UAAA,GAAA,MAAA,CAAA,WAAA,EAAA,IAAA,EAAA,IAAA,CAAA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,CAAA,GAAA,CAAA,EAAA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,CAAA,GAAA,EAAA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,CAAA,GAAA,CAAA,EAAA;AACA,KAjEA;AAmEA,IAAA,WAnEA,yBAmEA;AACA,WAAA,KAAA,CAAA,GAAA,CAAA,IAAA,KAAA,CAAA,YAAA,CAAA,QAAA,CAAA;AAEA,UAAA,iBAAA,GAAA,IAAA,KAAA,CAAA,gBAAA,CAAA,QAAA,EAAA,GAAA,CAAA;AACA,MAAA,iBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,SAAA;AACA,WAAA,KAAA,CAAA,GAAA,CAAA,iBAAA;AAEA,UAAA,iBAAA,GAAA,IAAA,KAAA,CAAA,gBAAA,CAAA,QAAA,EAAA,GAAA,CAAA;AACA,MAAA,iBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,SAAA;AACA,WAAA,KAAA,CAAA,GAAA,CAAA,iBAAA;AAEA,UAAA,iBAAA,GAAA,IAAA,KAAA,CAAA,gBAAA,CAAA,QAAA,EAAA,GAAA,CAAA;AACA,MAAA,iBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,SAAA;AACA,WAAA,KAAA,CAAA,GAAA,CAAA,iBAAA;AAEA,UAAA,iBAAA,GAAA,IAAA,KAAA,CAAA,gBAAA,CAAA,QAAA,EAAA,GAAA,CAAA;AACA,MAAA,iBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,SAAA;AACA,WAAA,KAAA,CAAA,GAAA,CAAA,iBAAA;AACA,KArFA;AAuFA,IAAA,YAvFA,0BAuFA;AAAA;;AACA,UAAA,UAAA,GAAA,KAAA,CAAA,UAAA,CAAA,WAAA,CAAA,QAAA,EAAA,KAAA,CAAA,SAAA,EAAA,YAAA;AACA,QAAA,UAAA,CAAA,KAAA,GAAA,KAAA,CAAA,cAAA;AACA,QAAA,UAAA,CAAA,KAAA,GAAA,KAAA,CAAA,cAAA;AACA,QAAA,UAAA,CAAA,MAAA,CAAA,GAAA,CAAA,EAAA,EAAA,CAAA;;AACA,QAAA,KAAA,CAAA,SAAA,CAAA,GAAA,CAAA,IAAA,KAAA,CAAA,IAAA,CACA,IAAA,KAAA,CAAA,cAAA,CAAA,KAAA,CAAA,MAAA,EAAA,KAAA,CAAA,QAAA,EAAA,KAAA,CAAA,QAAA,CADA,EAEA,IAAA,KAAA,CAAA,mBAAA,CAAA;AACA,UAAA,WAAA,EAAA,IADA;AAEA,UAAA,SAAA,EAAA,IAFA;AAGA,UAAA,UAAA,EAAA,KAHA;AAIA,UAAA,OAAA,EAAA,IAJA;AAKA,UAAA,GAAA,EAAA,UALA;AAMA,UAAA,KAAA,EAAA;AANA,SAAA,CAFA,CAAA;;AAWA,QAAA,KAAA,CAAA,eAAA;AACA,OAhBA,CAAA;AAiBA,KAzGA;AA2GA,IAAA,aA3GA,2BA2GA;AAAA;;AACA,WAAA,QAAA,GAAA,IAAA,aAAA,CAAA,KAAA,MAAA,EAAA,KAAA,QAAA,CAAA,UAAA,CAAA;AACA,WAAA,QAAA,CAAA,WAAA,GAAA,IAAA;AACA,WAAA,QAAA,CAAA,SAAA,GAAA,IAAA;AACA,WAAA,QAAA,CAAA,WAAA,GAAA,IAAA;AACA,WAAA,QAAA,CAAA,WAAA,GAAA,KAAA;AACA,WAAA,QAAA,CAAA,oBAAA,GAAA,GAAA;AACA,WAAA,QAAA,CAAA,eAAA,GAAA,GAAA;AACA,MAAA,UAAA,CAAA,YAAA;AACA,QAAA,MAAA,CAAA,QAAA,CAAA,UAAA,GAAA,IAAA;AACA,OAFA,EAEA,IAFA,CAAA;AAGA,KAtHA;AAwHA,IAAA,uBAxHA,mCAwHA,WAxHA,EAwHA;AACA,UAAA,KAAA,GAAA,IAAA,KAAA,CAAA,KAAA,CAAA,QAAA,CAAA;AACA,UAAA,OAAA,GAAA,KAAA,cAAA,CAAA,IAAA,CAAA,UAAA,OAAA;AAAA,eAAA,OAAA,CAAA,IAAA,CAAA,IAAA,KAAA,WAAA;AAAA,OAAA,CAAA;AACA,UAAA,aAAA,GAAA,OAAA,GAAA,KAAA,UAAA,CAAA,OAAA,CAAA,OAAA,CAAA,IAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA;;AACA,UAAA,CAAA,OAAA,EAAA;AACA,QAAA,KAAA,GAAA,IAAA,KAAA,CAAA,KAAA,CAAA,QAAA,CAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,kCAAA,EAAA,WAAA;AACA,OAHA,MAGA,IAAA,aAAA,KAAA,CAAA,CAAA,EAAA;AACA;AACA;AACA,QAAA,aAAA,GAAA,aAAA,KAAA,CAAA,GAAA,CAAA,GAAA,aAAA;AACA,QAAA,KAAA,CAAA,MAAA,CACA,aAAA,IAAA,IAAA,CAAA,CADA,EAEA,IAAA,CAAA,MAAA,KAAA,IAAA,GAAA,IAFA,EAGA,IAAA,CAAA,MAAA,KAAA,CAAA,GAAA,IAHA;AAKA;;AACA,aAAA,KAAA;AACA,KA1IA;AA4IA,IAAA,eA5IA,6BA4IA;AAAA;;AACA,WAAA,cAAA,CAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AACA,YAAA,QAAA,GAAA,IAAA,YAAA,CAAA,OAAA,EAAA,CAAA,CAAA;;AAEA,YAAA,KAAA,GAAA,MAAA,CAAA,uBAAA,CAAA,OAAA,CAAA,IAAA,CAAA,IAAA,CAAA;;AAEA,YAAA,IAAA,GAAA,OAAA,CAAA,IAAA,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,QAAA,EAAA,IAAA,KAAA,CAAA,mBAAA,CAAA;AACA,UAAA,KAAA,EAAA;AADA,SAAA,CAAA,CAAA;AAGA,QAAA,IAAA,CAAA,IAAA,GAAA,MAAA;AACA,QAAA,IAAA,CAAA,QAAA,CAAA,OAAA,GAAA,OAAA,CAAA,IAAA,CAAA,IAAA;AACA,QAAA,IAAA,CAAA,QAAA,CAAA,IAAA,GAAA,OAAA,CAAA,IAAA,CAAA,IAAA;;AACA,QAAA,MAAA,CAAA,SAAA,CAAA,GAAA,CAAA,IAAA;AACA,OAZA;AAaA,KA1JA;AA4JA,IAAA,eA5JA,6BA4JA;AAAA;;AACA,UAAA,aAAA,GAAA,KAAA,MAAA,CAAA,MAAA,CAAA,UAAA,CAAA;AAAA,eAAA,CAAA,CAAA,UAAA,IAAA,CAAA,CAAA,WAAA;AAAA,OAAA,CAAA;;AACA,UAAA,KAAA,MAAA,EAAA;AACA,QAAA,aAAA,GAAA,aAAA,CAAA,MAAA,CAAA,UAAA,CAAA;AAAA,iBAAA,CAAA,CAAA,QAAA,IAAA,MAAA,CAAA,MAAA;AAAA,SAAA,CAAA;AACA;;AACA,UAAA,KAAA,UAAA,EAAA;AACA,QAAA,aAAA,GAAA,aAAA,CAAA,MAAA,CAAA,UAAA,CAAA;AAAA,iBAAA,CAAA,CAAA,MAAA;AAAA,SAAA,CAAA;AACA;;AACA,UAAA,iBAAA,GAAA,aAAA,CAAA,GAAA,CAAA,UAAA,CAAA,EAAA;AACA,YAAA,qBAAA,GAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,UAAA,CAAA;AAAA,iBAAA,CAAA,CAAA,OAAA,KAAA,CAAA,CAAA,WAAA,CAAA,aAAA;AAAA,SAAA,EAAA,WAAA;;AACA,YAAA,cAAA,GAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,UAAA,CAAA;AAAA,iBAAA,CAAA,CAAA,IAAA,KAAA,SAAA,IAAA,CAAA,CAAA,IAAA,KAAA,qBAAA;AAAA,SAAA,EAAA,cAAA;;AACA,eAAA;AAAA,UAAA,IAAA,EAAA,qBAAA;AAAA,UAAA,IAAA,EAAA;AAAA,SAAA;AACA,OAJA,EAIA,MAJA,CAIA,UAAA,CAAA;AAAA,eAAA,CAAA,CAAA,IAAA,KAAA,MAAA,CAAA,MAAA,CAAA,WAAA;AAAA,OAJA,CAAA;;AAKA,UAAA,eAAA,sBAAA,IAAA,GAAA,CAAA,iBAAA,CAAA,CAAA;;AACA,WAAA,uBAAA,CAAA,KAAA,eAAA,EAAA,eAAA;AACA,WAAA,eAAA,GAAA,eAAA;AACA,KA5KA;AA8KA,IAAA,uBA9KA,mCA8KA,iBA9KA,EA8KA,YA9KA,EA8KA;AAAA;;AACA,UAAA,4BAAA,GAAA,iBAAA,CAAA,GAAA,CAAA,UAAA,OAAA;AAAA,eAAA,OAAA,CAAA,IAAA;AAAA,OAAA,CAAA;AACA,UAAA,uBAAA,GAAA,YAAA,CAAA,GAAA,CAAA,UAAA,OAAA;AAAA,eAAA,OAAA,CAAA,IAAA;AAAA,OAAA,CAAA;AACA,UAAA,SAAA,GAAA,YAAA,CAAA,MAAA,CAAA,UAAA,OAAA;AAAA,eAAA,CAAA,4BAAA,CAAA,QAAA,CAAA,OAAA,CAAA,IAAA,CAAA;AAAA,OAAA,CAAA;AACA,UAAA,WAAA,GAAA,iBAAA,CAAA,MAAA,CAAA,UAAA,OAAA;AAAA,eAAA,CAAA,uBAAA,CAAA,QAAA,CAAA,OAAA,CAAA,IAAA,CAAA;AAAA,OAAA,CAAA;AAEA,MAAA,SAAA,CAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AACA,YAAA,KAAA,GAAA,IAAA,KAAA,CAAA,KAAA,CAAA,OAAA,CAAA;AACA,QAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,IAAA,EAAA,IAAA,CAAA,MAAA,KAAA,CAAA,GAAA,GAAA;;AACA,QAAA,MAAA,CAAA,kBAAA,CAAA,OAAA,CAAA,IAAA,EAAA,KAAA;AACA,OAJA;AAMA,MAAA,WAAA,CAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AACA,YAAA,KAAA,GAAA,MAAA,CAAA,uBAAA,CAAA,OAAA,CAAA,IAAA,CAAA;;AACA,QAAA,MAAA,CAAA,kBAAA,CAAA,OAAA,CAAA,IAAA,EAAA,KAAA;AACA,OAHA;AAIA,KA9LA;AAgMA,IAAA,kBAhMA,8BAgMA,WAhMA,EAgMA,KAhMA,EAgMA;AACA,UAAA,WAAA,GAAA,KAAA,SAAA,CAAA,QAAA,CAAA,IAAA,CAAA,UAAA,CAAA;AAAA;;AAAA,eAAA,gBAAA,CAAA,CAAA,QAAA,4DAAA,IAAA,MAAA,WAAA;AAAA,OAAA,CAAA;;AACA,UAAA,WAAA,EAAA;AACA,QAAA,WAAA,CAAA,QAAA,CAAA,KAAA,GAAA,KAAA;AACA,OAFA,MAEA;AACA,QAAA,OAAA,CAAA,IAAA,kCAAA,WAAA;AACA;AACA,KAvMA;AAyMA,IAAA,OAzMA,qBAyMA;AAAA;;AACA,UAAA,OAAA,GAAA,SAAA,OAAA,GAAA;AACA,QAAA,qBAAA,CAAA,OAAA,CAAA;;AACA,QAAA,MAAA,CAAA,QAAA,CAAA,MAAA;;AACA,QAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,MAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA;AACA,OAJA;;AAKA,MAAA,OAAA;AACA;AAhNA,GA1BA;AA6OA,EAAA,KAAA,EAAA;AACA,IAAA,MADA,kBACA,MADA,EACA;AACA,WAAA,eAAA;AACA,KAHA;AAIA,IAAA,MAJA,kBAIA,MAJA,EAIA;AACA,WAAA,eAAA;AACA,KANA;AAOA,IAAA,UAPA,sBAOA,MAPA,EAOA;AACA,WAAA,eAAA;AACA,KATA;AAUA,IAAA,MAVA,kBAUA,MAVA,EAUA,MAVA,EAUA;AACA,UAAA,MAAA,IAAA,IAAA,EAAA;AACA;AACA;AACA,YAAA,aAAA,GAAA,KAAA,uBAAA,CAAA,MAAA,CAAA,WAAA,CAAA;AACA,aAAA,kBAAA,CAAA,MAAA,CAAA,WAAA,EAAA,aAAA;AACA;;AACA,WAAA,kBAAA,CAAA,MAAA,CAAA,WAAA,EAAA,IAAA,KAAA,CAAA,KAAA,CAAA,MAAA,CAAA;AACA,KAlBA;AAmBA,IAAA,iBAnBA,6BAmBA,MAnBA,EAmBA,MAnBA,EAmBA;AACA,UAAA,MAAA,KAAA,MAAA,EAAA;AACA,YAAA,MAAA,IAAA,IAAA,EAAA;AACA,UAAA,MAAA,CAAA,KAAA,CAAA,GAAA,CAAA,GAAA,EAAA,GAAA,EAAA,GAAA;AACA;;AACA,YAAA,MAAA,IAAA,IAAA,EAAA;AACA,UAAA,MAAA,CAAA,KAAA,CAAA,GAAA,CAAA,KAAA,UAAA,EAAA,IAAA,EAAA,IAAA;AACA;;AACA,aAAA,KAAA,CAAA,iBAAA,EAAA,MAAA,IAAA,IAAA,GAAA,MAAA,CAAA,QAAA,CAAA,OAAA,GAAA,EAAA;AACA;AACA;AA7BA,GA7OA;AA6QA,EAAA,OA7QA,qBA6QA;AACA,SAAA,cAAA,GAAA,MAAA,CAAA,IAAA,CAAA,SAAA,EAAA,MAAA,CAAA,UAAA,MAAA,EAAA,OAAA,EAAA;AACA,UAAA,IAAA,GAAA,SAAA,CAAA,OAAA,CAAA;AACA,MAAA,IAAA,CAAA,IAAA,CAAA,IAAA,GAAA,OAAA;AACA,MAAA,MAAA,CAAA,IAAA,CAAA,IAAA;AACA,aAAA,MAAA;AACA,KALA,EAKA,EALA,CAAA;AAMA,SAAA,SAAA;AACA,SAAA,OAAA;AACA;AAtRA,CAAA","sourcesContent":["<template>\n    <div id=\"globe\"></div>\n</template>\n\n<script>\nimport * as THREE from 'three'\nimport OrbitControls from 'three-orbitcontrols'\nimport SeaImage from '../assets/sea.jpg'\nimport Stars from '../assets/stars.png'\nimport Countries from '../data/globe-countries'\nimport Tessalator3D from '../utils/tessalator3d'\n\nexport default {\n    name: 'Globe',\n    props: {\n        quotes: Array,\n        places: Array,\n        budget: Number,\n        directOnly: Boolean,\n        origin: {\n            code: String,\n            countryCode: String,\n            name: String\n        }\n     },\n    data: () => ({\n        renderer: null,\n        scene: null,\n        camera: null,\n        controls: null,\n        radius: 0.995,\n        segments: 32,\n        intersectedObject: null,\n        hoverScale: 1.01,\n        continents: [\"EU\", \"AN\", \"AS\", \"OC\", \"SA\", \"AF\", \"NA\"],\n        resultCountries: [],\n        globeCountries: []\n    }),\n    methods: {\n        initGlobe() {\n            this.setupRenderer()\n            this.scene = new THREE.Scene()\n            this.setupCamera()\n            this.setupLights()\n\n            this.baseGlobe = new THREE.Object3D()\n            this.baseGlobe.scale.set(20, 20, 20)\n            this.scene.add(this.baseGlobe)\n\n            const starfield = new THREE.Mesh(\n                new THREE.SphereGeometry(90, 64, 64), \n                new THREE.MeshBasicMaterial({\n                    map: THREE.ImageUtils.loadTexture(Stars), \n                    side: THREE.BackSide\n                })\n            )\n            this.scene.add(starfield)\n\n            this.setupTexture()\n\n            this.setupControls()\n\n            document.addEventListener('mousemove', this.onDocumentMouseMove, false)\n            document.addEventListener('keyup', this.onMouseKeyUp, false)\n        },\n\n        onDocumentMouseMove(event) {\n            event.preventDefault()\n\n            const mouseX = (event.clientX / window.innerWidth) * 2 - 1\n            const mouseY = -(event.clientY / window.innerHeight) * 2 + 1\n            const vector = new THREE.Vector3(mouseX, mouseY, -1)\n            vector.unproject(this.camera)\n\n            const raycaster = new THREE.Raycaster(this.camera.position, vector.sub(this.camera.position).normalize())\n            const intersects = raycaster.intersectObject(this.baseGlobe, true)\n            if (intersects.length > 0 && intersects[0].object.name === \"land\") {\n                this.controls.autoRotate = false\n                this.intersectedObject = intersects[0].object\n            } else {\n                this.intersectedObject = null\n            }\n        },\n\n        onMouseKeyUp(event) {\n            if (event.keyCode === 82) { // key: R\n                this.controls.autoRotate = !this.controls.autoRotate\n            }\n        },\n        \n        setupRenderer() {\n            this.renderer = new THREE.WebGLRenderer()\n            this.renderer.setClearColor(0x000000, 0.0)\n            this.renderer.setPixelRatio(window.devicePixelRatio)\n            this.renderer.setSize(window.innerWidth, window.innerHeight)\n            document.body.appendChild(this.renderer.domElement)\n        },\n        \n        setupCamera() {\n            this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.01, 4500);\n            this.camera.position.x = -22\n            this.camera.position.y = 10\n            this.camera.position.z = -64\n        },\n\n        setupLights() {\n            this.scene.add(new THREE.AmbientLight(0x555555))\n            \n            var directionalLight1 = new THREE.DirectionalLight(0xaaaaaa, 0.5);\n            directionalLight1.position.set(-1, 1, 1).normalize();\n            this.scene.add(directionalLight1);\n\n            var directionalLight2 = new THREE.DirectionalLight(0xaaaaaa, 0.5);\n            directionalLight2.position.set(-1, 1, -1).normalize();\n            this.scene.add(directionalLight2);\n\n            var directionalLight3 = new THREE.DirectionalLight(0xaaaaaa, 0.5);\n            directionalLight3.position.set(1, 1, -1).normalize();\n            this.scene.add(directionalLight3);\n\n            var directionalLight4 = new THREE.DirectionalLight(0xaaaaaa, 0.5);\n            directionalLight4.position.set(1, 1, 1).normalize();\n            this.scene.add(directionalLight4);\n        },\n\n        setupTexture() {\n            const seaTexture = THREE.ImageUtils.loadTexture(SeaImage, THREE.UVMapping, () => {\n                seaTexture.wrapS = THREE.RepeatWrapping\n                seaTexture.wrapT = THREE.RepeatWrapping\n                seaTexture.repeat.set(16, 8)\n                this.baseGlobe.add(new THREE.Mesh(\n                    new THREE.SphereGeometry(this.radius, this.segments, this.segments),\n                    new THREE.MeshLambertMaterial({\n                        transparent: true,\n                        depthTest: true,\n                        depthWrite: false,\n                        opacity: 0.95,\n                        map: seaTexture,\n                        color: 0x6699ff\n                    })\n                ))\n                this.createCountries()\n            })\n        },\n\n        setupControls() {\n            this.controls = new OrbitControls( this.camera, this.renderer.domElement )\n            this.controls.rotateSpeed = 0.45;\n            this.controls.zoomSpeed = 0.20;\n            this.controls.minDistance = 20.0;\n            this.controls.maxDistance = 100.0;\n            this.controls.dynamicDampingFactor = 0.1\n            this.controls.autoRotateSpeed = 1.0;\n            setTimeout(() => {\n                this.controls.autoRotate = true\n            }, 3000)\n        },\n\n        getColorBasedOnContient(countryCode) {\n            let color = new THREE.Color(0xff0000)\n            const country = this.globeCountries.find(country => country.data.code === countryCode)\n            let contientIndex = country ? this.continents.indexOf(country.data.cont) : -1\n            if(!country) {\n                color = new THREE.Color(0x000000)\n                console.log('could not found matching country', countryCode)\n            } else if (contientIndex !== -1) {\n                // Temp fix for not using green colors on contients\n                // TODO - make color matrix for continents\n                contientIndex = contientIndex === 2 ? 4 : contientIndex\n                color.setHSL(\n                    contientIndex * (1 / 7),\n                    Math.random() * 0.25 + 0.65,\n                    Math.random() / 2 + 0.25\n                )\n            }\n            return color\n        },\n\n        createCountries() {\n            this.globeCountries.forEach(country => {\n                const geometry = new Tessalator3D(country, 0)\n\n                const color = this.getColorBasedOnContient(country.data.code)\n\n                const mesh = country.mesh = new THREE.Mesh(geometry, new THREE.MeshLambertMaterial({\n                    color: color\n                }))\n                mesh.name = \"land\";\n                mesh.userData.country = country.data.name\n                mesh.userData.code = country.data.code\n                this.baseGlobe.add(mesh)\n            })\n        },\n\n        updateCountries() {\n            let filteredTrips = this.quotes.filter(q => q.InboundLeg && q.OutboundLeg)\n            if (this.budget) {\n                filteredTrips = filteredTrips.filter(q => q.MinPrice <= this.budget)\n            }\n            if (this.directOnly) {\n                filteredTrips = filteredTrips.filter(q => q.Direct)\n            }\n            const filteredCountries = filteredTrips.map(t => {\n                const countryNameForStation = this.places.find(p => p.PlaceId === t.OutboundLeg.DestinationId).CountryName\n                const skyscannerCode = this.places.find(p => p.Type === 'Country' && p.Name === countryNameForStation).SkyscannerCode\n                return {name: countryNameForStation, code: skyscannerCode}\n            }).filter(c => c.code !== this.origin.countryCode)\n            const uniqueCountries = [...new Set(filteredCountries)] \n            this.handleSelectedCountries(this.resultCountries, uniqueCountries)\n            this.resultCountries = uniqueCountries\n        },\n\n        handleSelectedCountries(previousCountries, newCountries) {\n            const previousSelectedCountryCodes = previousCountries.map(country => country.code)\n            const newSelectedCountryCodes = newCountries.map(country => country.code)\n            const toBeAdded = newCountries.filter(country => !previousSelectedCountryCodes.includes(country.code))\n            const toBeRemoved = previousCountries.filter(country => !newSelectedCountryCodes.includes(country.code))\n\n            toBeAdded.forEach(country => {\n                const color = new THREE.Color('green')\n                color.setHSL(0.285, 0.65, Math.random() / 7 + 0.4)\n                this.updateCountryColor(country.code, color)\n            })\n\n            toBeRemoved.forEach(country => {\n                const color = this.getColorBasedOnContient(country.code)\n                this.updateCountryColor(country.code, color)\n            })\n        },\n\n        updateCountryColor(countryCode, color) {\n            const countryMesh = this.baseGlobe.children.find(c => c.userData?.code === countryCode)\n            if (countryMesh) {\n                countryMesh.material.color = color\n            } else {\n                console.warn(`Mesh with country code ${countryCode} not found`)\n            }\n        },\n\n        animate() {\n            const animate = () => {\n                requestAnimationFrame(animate)\n                this.controls.update()\n                this.renderer.render(this.scene, this.camera)\n            }\n            animate()\n        }\n    },\n\n    watch: {\n        quotes(newVal) {\n            this.updateCountries()\n        },\n        budget(newVal) {\n            this.updateCountries()\n        },\n        directOnly(newVal) {\n            this.updateCountries()\n        },\n        origin(newVal, oldVal) {\n            if (oldVal != null) {\n                // TODO rotate so country is focused in globe\n                // Restore color of previous selected origin\n                const contientColor = this.getColorBasedOnContient(oldVal.countryCode)\n                this.updateCountryColor(oldVal.countryCode, contientColor)\n            }\n            this.updateCountryColor(newVal.countryCode, new THREE.Color('blue'))\n        },\n        intersectedObject(newVal, oldVal)  {\n            if(newVal !== oldVal) {\n                if(oldVal != null) {\n                    oldVal.scale.set(1.0, 1.0, 1.0)\n                }\n                if(newVal != null) {\n                    newVal.scale.set(this.hoverScale, 1.01, 1.01)\n                }\n                this.$emit('onCountryChange', newVal != null ? newVal.userData.country : '')\n            }\n        }\n    },\n\n    mounted() {\n        this.globeCountries = Object.keys(Countries).reduce((result, country) => {\n            const item = Countries[country]\n            item.data.name = country\n            result.push(item)\n            return result\n        }, [])\n        this.initGlobe()\n        this.animate()\n    }\n}\n</script>\n\n<style scoped>\n</style>\n"],"sourceRoot":"src/components"}]}